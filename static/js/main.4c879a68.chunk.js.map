{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","itemsDeckTo","handleChange","bind","event","this","setState","parseInt","target","value","console","log","className","type","min","max","onChange","to","React","Component","BattleGoals","deck","shuffledDeck","drawnDeck","drawCard","fetch","process","then","res","json","result","filter","c","name","shuffleDeck","error","length","slice","drawnCards","map","card","Card","key","image","onClick","ItemsDeck","cards","match","number","e","preventDefault","src","alt","newDeck","i","j","Math","floor","random","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kQAGMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,YAAa,IAC5B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,yDAKNC,GACXC,KAAKC,SAAS,CAACL,YAAaM,SAASH,EAAMI,OAAOC,SAClDC,QAAQC,IAAIN,KAAKL,MAAMC,e,+BAGvB,OACE,yBAAKW,UAAU,OACb,4BAAQA,UAAU,OAChB,kDAEE,2BAAOC,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAMN,MAAOJ,KAAKL,MAAMC,YAAae,SAAUX,KAAKH,iBAGzF,kBAAC,EAAD,CAAWe,GAAIZ,KAAKL,MAAMC,cAC1B,kBAAC,EAAD,W,GApBUiB,IAAMC,YA0BlBC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXqB,KAAM,GACNC,aAAc,GACdC,UAAW,IAEb,EAAKC,SAAW,EAAKA,SAASrB,KAAd,gBAPC,E,gEASE,IAAD,OAClBsB,MAAMC,qDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,IAAMT,EAAOS,EAAOC,QAAO,SAAAC,GAAC,MAAe,oBAAXA,EAAEC,QAClC,EAAK3B,SAAS,CACZe,KAAMA,EACNC,aAAcY,EAAYb,GAC1BE,UAAW,QAGf,SAACY,GACCzB,QAAQyB,MAAMA,Q,iCAKpB,IAAMb,EAAejB,KAAKL,MAAMsB,aAAac,OAAS,EACpD/B,KAAKL,MAAMsB,aAAeY,EAAY7B,KAAKL,MAAMqB,MAE7CE,EAAYlB,KAAKL,MAAMsB,aAAac,OAAS,EACjD/B,KAAKL,MAAMuB,UAAY,GAEzBlB,KAAKC,SAAS,CACZe,KAAMhB,KAAKL,MAAMqB,KACjBE,UAAU,CAAED,EAAa,IAAhB,mBAAuBC,IAChCD,aAAa,YAAKA,EAAae,MAAM,Q,+BAIvC,IAAMC,EAAajC,KAAKL,MAAMuB,UAAUgB,KAAI,SAACC,GAAD,OAC1C,kBAACC,EAAD,CAAMC,IAAKF,EAAKP,KAAMU,MAAOjB,sCAAgDc,EAAKG,MAAQV,KAAMO,EAAKP,UAGvG,OACE,yBAAKrB,UAAU,+BACb,kBAAC6B,EAAD,CACER,KAAK,mBACLW,QAASvC,KAAKmB,SACdmB,MAAOjB,wEACRY,O,GAnDiBpB,IAAMC,WAyD1B0B,E,kDACJ,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXqB,KAAM,IAHS,E,gEAME,IAAD,OAClBI,MAAMC,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,IAAMgB,EAAQhB,EACXC,QAAO,SAAAS,GAAI,OAAIA,EAAKP,KAAKc,MAAM,yBAC/BR,KAAI,SAASC,GACZ,MAAO,CACLQ,OAAQzC,SAASiC,EAAKP,KAAKc,MAAM,SAAS,IAC1Cd,KAAMO,EAAKP,KACXU,MAAOjB,sCAAgDc,EAAKG,UAGlE,EAAKrC,SAAS,CACZe,KAAMyB,OAGV,SAACX,GACCzB,QAAQyB,MAAMA,Q,+BAIZ,IAAD,OACDW,EAAQzC,KAAKL,MAAMqB,KAAKU,QAAO,SAAAS,GAAI,OAAIA,EAAKQ,QAAU,EAAKjD,MAAMkB,MAAIsB,KAAI,SAACC,GAAD,OAC7E,kBAACC,EAAD,CAAMC,IAAKF,EAAKQ,OAAQL,MAAOH,EAAKG,MAAOV,KAAMO,EAAKP,UAExD,OACE,yBAAKrB,UAAU,+BACZkC,O,GApCe5B,IAAMC,WA0C9B,SAASsB,EAAK1C,GAOZ,OACE,yBAAKa,UAAU,WAAWgC,QAP5B,SAAqBK,GACnBA,EAAEC,iBACEnD,EAAM6C,SACR7C,EAAM6C,QAAQ7C,EAAMkC,QAKpB,yBAAKrB,UAAU,YAAYuC,IAAKpD,EAAM4C,MAAOS,IAAKrD,EAAMkC,QAM9D,SAASC,EAAYb,GAEjB,IADF,IAAIgC,EAAO,YAAOhC,GACPiC,EAAID,EAAQjB,OAAS,EAAGkB,EAAI,EAAGA,IAAK,CAC3C,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADC,EAEhB,CAACD,EAAQE,GAAIF,EAAQC,IAA/CD,EAAQC,GAFkC,KAE9BD,EAAQE,GAFsB,KAI/C,OAAOF,EAGMvD,QC5IK6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLzB,QAAQyB,MAAMA,EAAMuC,a","file":"static/js/main.4c879a68.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { itemsDeckTo: 14 };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({itemsDeckTo: parseInt(event.target.value)});\n    console.log(this.state.itemsDeckTo);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"m-8\">\n          <label>\n            Available items: \n            <input type=\"number\" min=\"1\" max=\"164\" value={this.state.itemsDeckTo} onChange={this.handleChange} />\n          </label>\n        </header>\n        <ItemsDeck to={this.state.itemsDeckTo} />\n        <BattleGoals />\n      </div>\n    );\n  }\n}\n\nclass BattleGoals extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      shuffledDeck: [],\n      drawnDeck: []\n    };\n    this.drawCard = this.drawCard.bind(this);\n  }\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/gloomhaven/data/battle-goals.js')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const deck = result.filter(c => c.name !== 'battlegoal-back');\n          this.setState({ \n            deck: deck,\n            shuffledDeck: shuffleDeck(deck),\n            drawnDeck: []\n          });\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n  drawCard() {\n    const shuffledDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.shuffledDeck : shuffleDeck(this.state.deck);\n\n    const drawnDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.drawnDeck : [];\n\n    this.setState({\n      deck: this.state.deck,\n      drawnDeck: [shuffledDeck[0], ...drawnDeck],\n      shuffledDeck: [...shuffledDeck.slice(1)]\n    });\n  }\n  render() {\n    const drawnCards = this.state.drawnDeck.map((card) =>\n      <Card key={card.name} image={process.env.PUBLIC_URL + 'gloomhaven/images/' + card.image } name={card.name} />\n    );\n\n    return (\n      <div className=\"flex flex-wrap flex-row m-6\">\n        <Card \n          name=\"Draw Battle Card\" \n          onClick={this.drawCard}\n          image={process.env.PUBLIC_URL + 'gloomhaven/images/battle-goals/battlegoal-back.png' } />\n        {drawnCards}\n      </div>\n    )\n  }\n}\n\nclass ItemsDeck extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: []\n    };\n  }\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/gloomhaven/data/items.js')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const cards = result\n            .filter(card => card.name.match(/item #[1-9]\\d{0,3}/))\n            .map(function(card) {\n              return {\n                number: parseInt(card.name.match(/(\\d+)/)[0]),\n                name: card.name,\n                image: process.env.PUBLIC_URL + 'gloomhaven/images/' + card.image\n              }\n            });\n          this.setState({ \n            deck: cards\n          });\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n  render() {\n    const cards = this.state.deck.filter(card => card.number <= this.props.to).map((card) =>\n      <Card key={card.number} image={card.image} name={card.name} />\n    );\n    return (\n      <div className=\"flex flex-wrap flex-row m-6\">\n        {cards}\n      </div>\n    );\n  }\n}\n\nfunction Card(props) {\n  function handleClick(e) {\n    e.preventDefault();\n    if (props.onClick) {\n      props.onClick(props.name);\n    }\n  }\n  return (\n    <div className=\"m-2 Card\" onClick={handleClick}>\n      <img className=\"Card-face\" src={props.image} alt={props.name} />\n    </div>\n  );\n}\n\n// Fisherâ€“Yates shuffle\nfunction shuffleDeck(deck) {\n  var newDeck = [...deck];\n    for (let i = newDeck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n    }\n  return newDeck;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}