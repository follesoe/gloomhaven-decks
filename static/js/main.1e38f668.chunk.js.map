{"version":3,"sources":["Card.js","shuffleDeck.js","BattleGoalsDeck.js","App.js","AttackModifierDeck.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","e","preventDefault","name","src","image","alt","shuffleDeck","deck","newDeck","i","length","j","Math","floor","random","BattleGoalsDeck","state","shuffledDeck","drawnDeck","drawCard","bind","fetch","process","then","res","json","result","filter","c","setState","error","console","this","slice","drawnCards","map","card","key","React","Component","ItemsApp","itemsDeckTo","handleChange","event","parseInt","target","value","log","type","min","max","onChange","to","ItemsDeck","cards","match","number","keyMap","SHUFFLE","DRAW","getRandomOffsetX","getRandom","getRandomOffsetY","getRandomRotationAngle","AttackModifierDeck","transform","shuffle","hotkeyHandlers","style","zIndex","draggable","handlers","defaultPosition","x","y","handle","left","Boolean","window","location","hostname","ReactDOM","render","basename","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1e38f668.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Card(props) {\n  function handleClick(e) {\n    e.preventDefault();\n    if (props.onClick) {\n      props.onClick(props.name);\n    }\n  }\n  return (\n    <div className=\"m-2 Card Card-pop Card-shadow\" onClick={handleClick}>\n      <img className=\"Card-face\" src={props.image} alt={props.name} />\n    </div>\n  );\n}\n\nexport default Card;\n","// Fisherâ€“Yates shuffle\nexport default function shuffleDeck(deck) {\n  var newDeck = [...deck];\n    for (let i = newDeck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n    }\n  return newDeck;\n}\n","import React from 'react';\nimport Card from './Card';\nimport shuffleDeck from './shuffleDeck';\nimport './App.css';\n\nclass BattleGoalsDeck extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      shuffledDeck: [],\n      drawnDeck: []\n    };\n    this.drawCard = this.drawCard.bind(this);\n  }\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/gloomhaven/data/battle-goals.js')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const deck = result.filter(c => c.name !== 'battlegoal-back');\n          this.setState({\n            deck: deck,\n            shuffledDeck: shuffleDeck(deck),\n            drawnDeck: []\n          });\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n  drawCard() {\n    const shuffledDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.shuffledDeck : shuffleDeck(this.state.deck);\n\n    const drawnDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.drawnDeck : [];\n\n    this.setState({\n      deck: this.state.deck,\n      drawnDeck: [shuffledDeck[0], ...drawnDeck],\n      shuffledDeck: [...shuffledDeck.slice(1)]\n    });\n  }\n  render() {\n    const drawnCards = this.state.drawnDeck.map((card) =>\n      <Card key={card.name} image={process.env.PUBLIC_URL + '/gloomhaven/images/' + card.image } name={card.name} />\n    );\n\n    return (\n      <div className=\"flex flex-wrap flex-row\">\n        <Card\n          name=\"Draw Battle Card\"\n          onClick={this.drawCard}\n          image={process.env.PUBLIC_URL + '/gloomhaven/images/battle-goals/battlegoal-back.png' } />\n        {drawnCards}\n      </div>\n    )\n  }\n}\n\nexport default BattleGoalsDeck;\n","import React from 'react';\nimport BattleGoalsDeck from './BattleGoalsDeck';\nimport Card from './Card';\nimport './App.css';\n\nclass ItemsApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { itemsDeckTo: 14 };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({itemsDeckTo: parseInt(event.target.value)});\n    console.log(this.state.itemsDeckTo);\n  }\n  render() {\n    return (\n      <div className=\"background-map h-screen\">\n        <header>\n          <label>\n            Available items:\n            <input type=\"number\" min=\"1\" max=\"164\" value={this.state.itemsDeckTo} onChange={this.handleChange} />\n          </label>\n        </header>\n        <ItemsDeck to={this.state.itemsDeckTo} />\n        <BattleGoalsDeck />\n      </div>\n    );\n  }\n}\n\nclass ItemsDeck extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: []\n    };\n  }\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/gloomhaven/data/items.js')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const cards = result\n            .filter(card => card.name.match(/item #[1-9]\\d{0,3}/))\n            .map(function(card) {\n              return {\n                number: parseInt(card.name.match(/(\\d+)/)[0]),\n                name: card.name,\n                image: process.env.PUBLIC_URL + '/gloomhaven/images/' + card.image\n              }\n            });\n          this.setState({\n            deck: cards\n          });\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n  render() {\n    const cards = this.state.deck.filter(card => card.number <= this.props.to).map((card) =>\n      <Card key={card.number} image={card.image} name={card.name} />\n    );\n    return (\n      <div className=\"flex flex-wrap flex-row m-6\">\n        {cards}\n      </div>\n    );\n  }\n}\n\nexport default ItemsApp;\n","import React from 'react';\nimport { HotKeys } from 'react-hotkeys';\nimport Draggable from 'react-draggable';\nimport shuffleDeck from './shuffleDeck';\n\nconst keyMap = {\n  SHUFFLE: ['s', 'Ctrl+s'],\n  DRAW: ['d', 'Ctrl+d']\n};\n\nclass AttackModifierDeck extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: props.type,\n      deck: [],\n      shuffledDeck: [],\n      drawnDeck: [],\n      transform: []\n    };\n\n    this.shuffle = this.shuffle.bind(this);\n    this.drawCard = this.drawCard.bind(this);\n\n    this.hotkeyHandlers = {\n      SHUFFLE: this.shuffle,\n      DRAW: this.drawCard\n    };\n  }\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/gloomhaven/data/attack-modifiers.js')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const deck = result\n            .filter(c => c.name.match(/am-m-\\d+/))\n            .map(function(c) {\n              return {\n                name: c.name,\n                image: process.env.PUBLIC_URL + '/gloomhaven/images/' + c.image\n              };\n            });\n          this.setState({\n            deck: deck,\n            shuffledDeck: shuffleDeck(deck),\n            drawnDeck: [],\n            transform: deck.map(c => `rotate(${getRandomRotationAngle()}) translateX(${getRandomOffsetX()}) translateY(${getRandomOffsetY()})`)\n          });\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n  shuffle() {\n    console.log('Shuffle!');\n    const deck = this.state.deck;\n    const shuffledDeck = shuffleDeck(deck);\n    this.setState({\n      deck: deck,\n      shuffledDeck: shuffledDeck,\n      drawnDeck: [],\n      transform: shuffledDeck.map(c => `rotate(${getRandomRotationAngle()}) translateX(${getRandomOffsetX()}) translateY(${getRandomOffsetY()})`)\n    });\n\n    console.log(this.state);\n  }\n  drawCard() {\n    const shuffledDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.shuffledDeck : shuffleDeck(this.state.deck);\n\n    const drawnDeck = this.state.shuffledDeck.length > 0 ?\n      this.state.drawnDeck : [];\n\n    this.setState({\n      deck: this.state.deck,\n      drawnDeck: [shuffledDeck[0], ...drawnDeck],\n      shuffledDeck: [...shuffledDeck.slice(1)],\n      transform: this.state.transform\n    });\n\n    console.log(this.state);\n  }\n  render() {\n    const cards = this.state.drawnDeck.map((card, i) =>\n      <div className=\"Card Card-shadow Card-anim absolute m-10\" key={card.name} style={{\n          zIndex: this.state.drawnDeck.length - i,\n          transform: this.state.transform[this.state.drawnDeck.length - i]\n        }}>\n        <img className=\"Card-face\" draggable=\"false\" alt={i} src={card.image} />\n      </div>\n    );\n\n    const deck = this.state.shuffledDeck.map((card, i) =>\n        <div className=\"Card Card-shadow absolute m-10\" key={i} style={{\n            zIndex: this.state.shuffledDeck.length - i,\n            transform: this.state.transform[this.state.shuffledDeck.length - i]\n          }}>\n          <img className=\"Card-face\" draggable=\"false\" src={process.env.PUBLIC_URL + '/am-back.png'} alt=\"Attack Modifier\" />\n        </div>\n    );\n\n    return (\n      <HotKeys keyMap={keyMap} handlers={this.hotkeyHandlers}>\n        <div className=\"bg-greenscreen h-screen flex\">\n          <Draggable defaultPosition={{x: 0, y: 0}} handle=\".handle\">\n            <div className=\"bg-black flex handle\">\n              <div className=\"relative\" style={{left: '0px'}}>\n                {deck}\n              </div>\n              <div className=\"relative\" style={{left: '220px'}}>\n                {cards}\n              </div>\n            </div>\n          </Draggable>\n        </div>\n      </HotKeys>\n    )\n  }\n}\n\nfunction getRandomOffsetX() {\n  return getRandom(-5, 5) + 'px';\n}\n\nfunction getRandomOffsetY() {\n  return getRandom(-5, 5) + 'px';\n}\n\nfunction getRandomRotationAngle() {\n  return getRandom(-5, 20) + 'deg';\n}\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default AttackModifierDeck;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './index.css';\nimport ItemsApp from './App';\nimport AttackModifierDeck from './AttackModifierDeck';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route path=\"/monster\">\n        <AttackModifierDeck type=\"monster\" />\n      </Route>\n      <Route exact path=\"/\">\n        <ItemsApp />\n      </Route>\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}